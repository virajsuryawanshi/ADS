import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
//import java.util.concurrent*;
import java.util.regrex.*;
public class Solution{
	static class SinglyLinkedListNode{
		public int data;
		public SinglyLinkedListNode next;
		public SinglyLinkedListNode(int nodeData){
			this.data=nodeData;
			this.next=null;
		}
	}
	static class SinglyLinkedList{
	public SinglyLinkedListNode head;
	public SinglyLinkedListNode tail;
		public SinglyLinkedList(){
			this.head=null;
			this.tail=null;
		}
		public void insertNode(int nodeData){
			SinglyLinkedListNode node=new SinglyLinkedListNode(nodeData);
			if (this.head==null){
				this.head=node;
		} else{
			this.tail.next=node;
		}
		this.tail=node;
		}
	}
	public static void printSinglyLinkedList(SinglyLinkedListNode node,String sep,BufferedWriter bufferedWriter)throws IOException{
		while (node!=null){c.write(String.valueOf(node.data));
		node=node.next;
		if (node!=null){
			bufferedWriter.write(sep);
		}
		}
	}

		class Result{
public static SinglyLinkedListNode  reverse	(SinglyLinkedListNode llist){
	Node Reverse(Node head){
		if (head==null){
			return null;
		}
		if (head.next==null){
			return head;
		}
		Node preNode =null;
		Node currNode =head;
		Node nextNode =null;
		while (currNode!=null){
			nextNode=currNode.next;
			currNode=preNode;
			preNode=currNode;
			currNode=nextNode;
		}
		head=preNode;
		return Head;
	}
	